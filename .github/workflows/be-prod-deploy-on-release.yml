name: BE Test Deploy On PR

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions: write-all

jobs:
  build:
    name: Build, Version, and Package Artifact
    runs-on: ubuntu-latest

    outputs:
      s3_key: ah-madda/codedeploy/ahmadda-server-prod-${{ steps.calc.outputs.version }}.tar.gz
      version: ${{ steps.calc.outputs.version }}
      artifact_name: ahmadda-server-prod-${{ steps.calc.outputs.version }}.tar.gz

    steps:
      - name: Checkout (for tagging)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch and determine base version
        id: base
        run: |
          git fetch --tags
          base_tag=$(git tag -l 'v*.*.*'  | grep -v '+be' | sort -V | tail -n 1)
          
          if [ -z "$base_tag" ]; then
            echo "No base tag found, setting default v5.2542.0"
            base_tag="v5.2542.0" 
          fi
          base_version="${base_tag#v}"

          head=$(echo "$base_version" | cut -d'.' -f1)
          yearweek=$(echo "$base_version" | cut -d'.' -f2)
          common_build=$(echo "$base_version" | cut -d'.' -f3)

          echo "head=$head" >> $GITHUB_OUTPUT
          echo "yearweek=$yearweek" >> $GITHUB_OUTPUT
          echo "common_build=$common_build" >> $GITHUB_OUTPUT

      - name: Calculate next BE build version
        id: calc
        run: |
          git fetch --tags
          head="${{ steps.base.outputs.head }}"
          yearweek="${{ steps.base.outputs.yearweek }}"
          common="${{ steps.base.outputs.common_build }}"
          prefix="v${head}.${yearweek}.${common}+be"

          matching_tags=$(git tag -l "${prefix}.*")
          if [[ -z "$matching_tags" ]]; then
            next_be_build=1
          else
            last_be_build=$(echo "$matching_tags" | sed -E 's/.*\+be\.([0-9]+)/\1/' | sort -n | tail -n 1)
            next_be_build=$((last_be_build + 1))
          fi

          version="${prefix}.${next_be_build}"
          echo "version=$version" >> $GITHUB_OUTPUT

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$version"
          git push origin "$version"

      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.BE_SUBMODULE_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: 'gradle'

      - name: Build with Gradle
        working-directory: ./server
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: Create artifact package
        run: |
          mkdir deploy-artifact
          cp server/build/libs/*[!plain].jar deploy-artifact/ahmadda-server-prod.jar
          cp codedeploy/be/appspec.yml deploy-artifact/
          cp -r codedeploy/be/scripts/ deploy-artifact/

      - name: Upload artifact for deploy job
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deploy-artifact/
          retention-days: 1

  deploy:
    name: Package and Deploy
    needs: build
    runs-on:
      - self-hosted
      - prod

    steps:
      - name: Clean up previous artifacts
        run: |
          echo "Cleaning up old build artifacts..."
          rm -f ahmadda-server-prod-*.tar.gz
          rm -rf deploy-artifact/

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: deploy-artifact/

      - name: Create deployment package (tar.gz)
        run: |
          tar -czf ${{ needs.build.outputs.artifact_name }} -C deploy-artifact .

      - name: Upload to S3
        run: |
          aws s3 cp \
            ${{ needs.build.outputs.artifact_name }} \
            s3://techcourse-project-2025/ah-madda/codedeploy/${{ needs.build.outputs.artifact_name }}

      - name: Start AWS CodeDeploy deployment
        run: |
          aws deploy create-deployment \
            --application-name ahmadda-code-deploy-ec2 \
            --deployment-group-name ahmadda-code-deploy-alb \
            --s3-location bucket=techcourse-project-2025,key=${{ needs.build.outputs.s3_key }},bundleType=tgz \
            --description "prod deployment ${{ needs.build.outputs.version }} deployed via GitHub Actions"

      - name: Post-cleanup build artifacts
        if: always()
        run: |
          echo "Cleaning up local build artifacts..."
          rm -f ${{ needs.build.outputs.artifact_name }}
          rm -rf deploy-artifact/

