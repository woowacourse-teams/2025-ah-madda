name: Setup Opened PRs

on:
  pull_request:
    types:
      - opened

jobs:
  setup_pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: read

    steps:
      - name: Set assignees
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;
            const author = pr.user.login;

            await github.rest.issues.addAssignees({
              owner: repository.owner.login,
              repo: repository.name,
              issue_number: pr.number,
              assignees: [author],
            });

      - name: Set labels
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;
            const branch = pr.head.ref;
            const title = pr.title;

            const branchLabelMap = {
              'feat/': 'feat',
              'fix/': 'fix',
              'chore/': 'chore',
              'refactor/': 'refactor',
              'test/': 'test',
              'design/': 'design',
              'docs/': 'docs',
            };

            const branchPrefix = Object.keys(branchLabelMap).find(p => branch.startsWith(p));
            const titlePrefixLabel = title.startsWith('[FE]') ? 'fe' : title.startsWith('[BE]') ? 'be' : null;

            const labels = [];
            if (branchPrefix) labels.push(branchLabelMap[branchPrefix]);
            if (titlePrefixLabel) labels.push(titlePrefixLabel);

            if (labels.length) {
              await github.rest.issues.addLabels({
                owner: repository.owner.login,
                repo: repository.name,
                issue_number: pr.number,
                labels,
              });
            }

      - name: Set reviewers
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;
            const author = pr.user.login;

            const feTeam = ['keemsebin', 'ExceptAnyone', 'yeji0214'];
            const beTeam = ['joon6093', 'abc5259', 'praisebak', 'jumdo12'];

            const isAuthorFE = feTeam.includes(author);
            const isAuthorBE = beTeam.includes(author);

            const reviewers = (isAuthorFE ? feTeam : isAuthorBE ? beTeam : []).filter(r => r !== author);

            if (reviewers.length) {
              await github.rest.pulls.requestReviewers({
                owner: repository.owner.login,
                repo: repository.name,
                pull_number: pr.number,
                reviewers,
              });
            }

      - name: Set Project v2
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_V2_TOKEN }}
          script: |
            const { pull_request: pr } = context.payload;
            const projectNodeId = 'PVT_kwDOA_44FM4A9RQT';
            const addItemResponse = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `, {
              projectId: projectNodeId,
              contentId: pr.node_id,
            });

            const itemId = addItemResponse.addProjectV2ItemById.item.id;

            const statusFieldId = 'PVTSSF_lADOA_44FM4A9RQTzgxBWgo';
            const inprogressOptionId = '47fc9ee4';

            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item { id }
                }
              }
            `, {
              projectId: projectNodeId,
              itemId,
              fieldId: statusFieldId,
              optionId: inprogressOptionId,
            });

      - name: Set milestone
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;
            const today = new Date();

            console.log(`Fetching milestones for repo: ${repository.owner.login}/${repository.name}`);
            const milestones = await github.paginate('GET /repos/' + repository.owner.login + '/' + repository.name + '/milestones', {
              state: 'open'
            });

            console.log(`Total milestones found: ${milestones.length}`);
            milestones.forEach(m => {
              console.log(`- ${m.title}: created_at=${m.created_at}, due_on=${m.due_on}`);
            });

            const milestone = milestones.find(m => {
              if (!m.due_on) return false;
              const startDate = new Date(m.created_at);
              const dueDate = new Date(m.due_on);
              return startDate <= today && today <= dueDate;
            });

            if (milestone) {
              console.log(`Assigning milestone '${milestone.title}' (ID: ${milestone.number}) to PR #${pr.number}`);
              await github.request('PATCH /repos/' + repository.owner.login + '/' + repository.name + '/issues/' + pr.number, {
                milestone: milestone.number
              });
            } else {
              console.log('No active milestone found for today.');
            }
